// Generated by view binder compiler. Do not edit!
package com.example.pokemon.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.pokemon.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemUserBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView attack;

  @NonNull
  public final TextView deffense;

  @NonNull
  public final TextView ds;

  @NonNull
  public final TextView hp;

  @NonNull
  public final TextView id;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView special;

  @NonNull
  public final TextView speed;

  @NonNull
  public final TextView tipo;

  @NonNull
  public final TextView weight;

  private ItemUserBinding(@NonNull ConstraintLayout rootView, @NonNull TextView attack,
      @NonNull TextView deffense, @NonNull TextView ds, @NonNull TextView hp, @NonNull TextView id,
      @NonNull TextView name, @NonNull TextView special, @NonNull TextView speed,
      @NonNull TextView tipo, @NonNull TextView weight) {
    this.rootView = rootView;
    this.attack = attack;
    this.deffense = deffense;
    this.ds = ds;
    this.hp = hp;
    this.id = id;
    this.name = name;
    this.special = special;
    this.speed = speed;
    this.tipo = tipo;
    this.weight = weight;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemUserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemUserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_user, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemUserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.attack;
      TextView attack = ViewBindings.findChildViewById(rootView, id);
      if (attack == null) {
        break missingId;
      }

      id = R.id.deffense;
      TextView deffense = ViewBindings.findChildViewById(rootView, id);
      if (deffense == null) {
        break missingId;
      }

      id = R.id.ds;
      TextView ds = ViewBindings.findChildViewById(rootView, id);
      if (ds == null) {
        break missingId;
      }

      id = R.id.hp;
      TextView hp = ViewBindings.findChildViewById(rootView, id);
      if (hp == null) {
        break missingId;
      }

      id = R.id.id;
      TextView id_ = ViewBindings.findChildViewById(rootView, id);
      if (id_ == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.special;
      TextView special = ViewBindings.findChildViewById(rootView, id);
      if (special == null) {
        break missingId;
      }

      id = R.id.speed;
      TextView speed = ViewBindings.findChildViewById(rootView, id);
      if (speed == null) {
        break missingId;
      }

      id = R.id.tipo;
      TextView tipo = ViewBindings.findChildViewById(rootView, id);
      if (tipo == null) {
        break missingId;
      }

      id = R.id.weight;
      TextView weight = ViewBindings.findChildViewById(rootView, id);
      if (weight == null) {
        break missingId;
      }

      return new ItemUserBinding((ConstraintLayout) rootView, attack, deffense, ds, hp, id_, name,
          special, speed, tipo, weight);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
